{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","role","htmlFor","TextForm","useState","text","setText","style","color","heading","onChange","event","target","value","backgroundColor","rows","newText","toUpperCase","showAlert","toLowerCase","charAt","slice","split","join","document","getElementById","select","navigator","clipboard","writeText","length","prototype","PropTypes","string","isRequired","aboutText","defaultProps","alert","word","str","capitalize","msg","App","setMode","setAlert","message","setTimeout","body","Alert","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.bc127bd4.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom';\r\n\r\n\r\n\r\nexport default function Navbar(props) {\r\n  \r\n  return (\r\n    //template lateral is used here in below line\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}> /\r\n    <div className=\"container-fluid\">\r\n      {/* <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link> */}\r\n      <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n      <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n        <span className=\"navbar-toggler-icon\"></span>\r\n      </button>\r\n      <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n        <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n          <li className=\"nav-item\">\r\n            {/* <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link> */}\r\n            <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n          </li>\r\n          <li className=\"nav-item\">\r\n            {/* <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link> */}\r\n            {/* <a className=\"nav-link\" href=\"/about\">{props.aboutText}</a> */}\r\n          </li>\r\n         </ul>\r\n         {/* <div className=\"d-flex\">\r\n          <div type='button' className='bg-primary rounded mx-2 ' style={{height:'30px', width:'30px',cursor:'pointer'}}   onClick={()=>{props.toggleMode('primary')}}></div>\r\n          <div type='button' className='bg-danger rounded mx-2 ' style={{height:'30px', width:'30px',cursor:'pointer'}} onClick={()=>{props.toggleMode('danger')}}></div>\r\n          <div type='button' className='bg-success rounded mx-2 ' style={{height:'30px', width:'30px',cursor:'pointer'}} onClick={()=>{props.toggleMode('success')}}></div>\r\n          <div type='button' className='bg-warning rounded mx-2 ' style={{height:'30px', width:'30px',cursor:'pointer'}} onClick={()=>{props.toggleMode('warning')}}></div>\r\n                  \r\n\r\n         </div> */}\r\n        {/* template lateral is used here in below line  and below code is switches code of bootstrap*/}\r\n        <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n        <input className=\"form-check-input\"  onClick={props.toggleMode}  type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n      </div>\r\n\r\n        {/* <form className=\"d-flex\" role=\"search\">\r\n          <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n          <button className=\"btn btn-primary\" type=\"submit\">Search</button>\r\n        </form> */}\r\n      </div>\r\n    </div>\r\n  </nav>\r\n  )\r\n}\r\nNavbar.prototype={\r\n    title:PropTypes.string.isRequired,\r\n    aboutText:PropTypes.string\r\n}\r\nNavbar.defaultProps={\r\n    title:'Set title here',\r\n    aboutText:'About'\r\n};","\r\nimport React,{useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n  \r\n  const handleUpClick=()=>{\r\n    \r\n        let newText=text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to Uppercase!\",\"success\");\r\n    }\r\n    \r\n    const handleLowerClick=()=>{\r\n      let newText=text.toLowerCase();\r\n      setText(newText);\r\n      props.showAlert(\"Converted to Lowercase!\",\"success\");\r\n    }\r\n    const handleclearClick=()=>{\r\n      let newText='';\r\n      setText(newText);\r\n      props.showAlert(\"Text Cleared\",\"success\");\r\n    }\r\nconst handleCapClick=()=>{\r\n  let newText=text.charAt(0).toUpperCase() + text.slice(1).toLowerCase();\r\n  setText(newText);\r\n  props.showAlert(\"Text Capitalized\",\"success\");\r\n}\r\n\r\nconst handleExtraSpaceClick=()=>{\r\n  let newText=text.split(/[ ] +/);\r\n  setText(newText.join(\" \"));\r\n  props.showAlert(\"Remove extra spaces!\",\"success\");\r\n}\r\nconst handleCopyClick=()=>{\r\n  let newText=document.getElementById(\"myBox\");\r\n  newText.select();\r\n  navigator.clipboard.writeText(newText.value);\r\n  props.showAlert(\"Copy to Clipboard!\",\"success\");\r\n}\r\n\r\n// const handledownloadClick=()=>{\r\n    //   const element=document.createElement(\"a\");\r\n    //   const file=new Blob([document.getElementById(\"textarea\").value],{\r\n    //     type:\"text/plain;charset=utf-8\",\r\n    //   });\r\n    //   element.href=URL.createObjectURL(file);\r\n    //   element.download=\"NewFile.txt\";\r\n    //   document.body.appendChild(element);\r\n    //   element.click();\r\n    // }\r\n    const handleOnChange=(event)=>{\r\n        setText(event.target.value);\r\n    }\r\n   \r\n    const [text,setText]=useState('');\r\n  return (\r\n<>\r\n\r\n    <div className=\"container\" style={{color:props.mode==='light'?'black':'white'}} >\r\n        \r\n            <h1 >{props.heading}</h1>\r\n            <div className=\"mb-3\">\r\n          \r\n               <textarea className=\"form-control\" onChange={handleOnChange} style={{backgroundColor:props.mode==='light'?'white':'grey',color:props.mode==='light'?'black':'white'}}   id=\"myBox\" rows=\"9\"></textarea>\r\n            </div>\r\n          <button className=\"btn btn-light mx-1 p-1\"  onClick={handleUpClick}> Uppercase</button>        \r\n           <button className=\"btn btn-light mx-1 p-1\"  onClick={handleLowerClick}> Lowercase</button>\r\n            <button className=\"btn btn-light mx-1 p-1\" onClick={handleclearClick}>Clear Text</button>\r\n            <button className=\"btn btn-light mx-1 p-1 \" onClick={handleCapClick}>Capitalized text</button>\r\n            <button className=\"btn btn-light mx-1 p-1\" onClick={handleExtraSpaceClick}>Remove Spaces</button>\r\n            <button className=\"btn btn-light mx-1 p-1\" onClick={handleCopyClick}>Copy to Clipboard</button>\r\n    </div>\r\n\r\n    <div className=\"container my-3\" style={{color:props.mode==='light'?'black':'white'}} >\r\n        <h2>Your text summary</h2>\r\n        <p>{text.split(\" \").length} words,{text.length} characters</p>\r\n        <p>{0.008 * text.split(\" \").length}Minutes Read</p>\r\n        <h2>Preview</h2>\r\n        <p>{text.length>0?text:\"Enter text to preview\"}</p>\r\n    </div>\r\n\r\n    </>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nfunction alert(props) {\r\n  const capitalize=(word)=>{\r\n    const str=word.toLowerCase();\r\n    return str.charAt(0).toUpperCase()+ str.slice(1);\r\n  }\r\n  return (\r\n    props.alert &&<div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n        <strong>{capitalize(props.alert.type)}</strong>:{props.alert.msg} \r\n      </div>\r\n  )\r\n}\r\n\r\nexport default alert\r\n\r\n","//import logo from './logo.svg';\r\nimport './App.css';\r\n// import About from './components/About';\r\nimport Navbar from './components/Navbar';\r\nimport TextForm from './components/TextForm';\r\nimport Alert from './components/Alert';\r\nimport React,{useState} from 'react';\r\n// import {\r\n//   BrowserRouter as Router,\r\n//   Switch,\r\n//   Route\r\n// } from \"react-router-dom\";\r\n\r\nfunction App() {\r\n  const [mode, setMode] = useState('light');\r\n\r\n  // const removeBodyClases=()=>{\r\n    // document.body.classList.remove('bg-light')\r\n    // document.body.classList.remove('bg-dark')\r\n    // document.body.classList.remove('bg-primary')\r\n    // document.body.classList.remove('bg-danger')\r\n    // document.body.classList.remove('bg-success')\r\n    // document.body.classList.remove('bg-warning')\r\n  // }\r\n\r\n  const toggleMode=()=>{\r\n  //   removeBodyClases();\r\n  //   document.body.classList.add('bg-'+cls)\r\n  \r\n    if(mode==='light'){\r\n      setMode('dark');\r\n      document.body.style.backgroundColor='#042743';\r\n       showAlert(\"Dark mode has been enabled\",\"success\");\r\n           // document.title=\"Text Utils-Dark Mode\";\r\n      // setInterval(() => {\r\n      //   document.title=\"Install text utils now\";\r\n      // }, 1000); setInterval(() => {\r\n      //   document.title=\"Text utils is amazing\";\r\n      // }, 1500);\r\n    }else{\r\n      setMode('light');\r\n      document.body.style.backgroundColor='white';\r\n      showAlert(\"Light mode has been enabled\",\"success\");\r\n      //document.title=\"Text Utils-Light Mode\";\r\n    }\r\n  }\r\n  const [alert, setAlert] = useState(null);\r\n  const showAlert=(message,type)=>{\r\n    setAlert({\r\n      msg:message,\r\n      type:type\r\n    })\r\n    setTimeout(()=>{\r\n      setAlert(null);\r\n    },1500);\r\n  }\r\n  return (\r\n  <>\r\n  {/* <Router> */}\r\n  <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode}   />\r\n  <Alert alert={alert}/>\r\n  <div className=\"container my-3\">\r\n  {/* <Switch>\r\n          <Route exact path=\"/about\">\r\n           // <About />\r\n          </Route>\r\n          \r\n          <Route exact path=\"/\">*/\r\n          <TextForm heading=\"Enter the text to analyze\"    showAlert={showAlert}  mode={mode}  />\r\n          // </Route>\r\n    // </Switch> \r\n  }\r\n    </div>\r\n    {/* </Router> */}\r\n  \r\n   </>\r\n  );\r\n}\r\n  export default App;\r\n\r\n\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n\r\n"],"sourceRoot":""}